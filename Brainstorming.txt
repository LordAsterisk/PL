When someone creates predicate male, what should happen?:

male = Predicate("male")    # This makes an object male(). Male is like a goal. It also creates two functions
maleAdd("Bob")              # This adds the fact that Bob is male.
maleAsk(X)                  # This queries for all males.

parent = Predicate("parent")
X = Var(X)
Y = Var(Y)
parent(X, Y).add(child(Y, X)))

-----------
Lists = "["1", "apple", "|", "[c]"]"

"|" seperates the head and tail. Everything after "|" must be a list.

-------------

parent(A, B) :- child(B, A).

parent("A", "B") >> child("B", "A")

--------

ListPL isn't a type of Term, it is a type of value?? Values can be type ListPL

if value is a listPL, 

Or List turns into a Const/Var (head) and a ListPL (Tail).

Or ListPL 

--------

'+' for putting info IN.
'-' for taking info OUT.

___
Var([Const("1"), Const("4"), Var("X")])

Const([]) is list terminator.

If values are lists, compare/unify each item in them. If item is |, instead make Var after it equal remainder of other list.

_____
ListPLs are made up of a list and an end var.
The end var is the var after |.
if no | in the list, end is a const([])

to unify ListPLs, first unify the list, then unify the end.